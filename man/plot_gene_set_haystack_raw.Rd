% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/haystack_visualization.R
\name{plot_gene_set_haystack_raw}
\alias{plot_gene_set_haystack_raw}
\title{Visualizing the detection/expression of a set of genes in a 2D plot}
\usage{
plot_gene_set_haystack_raw(x, y, genes = NA, detection,
  high.resolution = TRUE, point.size = 1, order.by.signal = FALSE)
}
\arguments{
\item{x}{x-axis coordinates of cells in a 2D representation (e.g. resulting from PCA or t-SNE)}

\item{y}{y-axis coordinates of cells in a 2D representation}

\item{genes}{Gene names that are present in the input expression data, or a numerical indeces. If NA, all genes will be used.}

\item{detection}{a logical matrix showing detection of genes (rows) in cells (columns)}

\item{high.resolution}{logical (default: TRUE). If set to FALSE, the density plot will be of a lower resolution}

\item{point.size}{numerical value to set size of points in plot. Default is 1.}

\item{order.by.signal}{If TRUE, cells with higher signal will be put on the foreground in the plot. Default is FALSE.}
}
\value{
A plot
}
\description{
Visualizing the detection/expression of a set of genes in a 2D plot
}
\examples{
# using the toy example of the singleCellHaystack package
# define a logical matrix with detection of each gene (rows) in each cell (columns)
dat.detection <- dat.expression > 1

# running haystack in default mode
res <- haystack(x=dat.tsne$tSNE1, y=dat.tsne$tSNE2, detection=dat.detection)

# get biased genes, store in variable gene.subset
sorted.table <- show_result_haystack(res.haystack = res, p.value.threshold = 1e-5)
gene.subset <- row.names(sorted.table)

# hierarchical clustering, and cutting into 5 clusters
hc <- hclust_haystack(x=dat.tsne$tSNE1, y=dat.tsne$tSNE2, detection=dat.detection, genes=gene.subset)
hc.clusters <- cutree(hc,k = 5)

# visualization of average pattern of cluster 1
plot_gene_set_haystack(x=dat.tsne$tSNE1, y=dat.tsne$tSNE2, detection=dat.detection, genes=names(hc.clusters[hc.clusters==1]))

# tweak size of points in plot sing 'point.size'
plot_gene_set_haystack(x=dat.tsne$tSNE1, y=dat.tsne$tSNE2, detection=dat.detection, genes=names(hc.clusters[hc.clusters==1]), point.size=.1)

# sort cells in the plot so cells with high average signal come on top
plot_gene_set_haystack(x=dat.tsne$tSNE1, y=dat.tsne$tSNE2, detection=dat.detection, genes=names(hc.clusters[hc.clusters==1]), point.size=2, order.by.signal=TRUE)
}
